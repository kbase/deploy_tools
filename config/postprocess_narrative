#!/usr/bin/env perl

use FindBin;
use lib "$FindBin::Bin/../perl/";
use KBDeploy;
use strict;

# This is the name for now, as this is what the Lua provisioner looks for to fire up a Narrative.
my $NAR_NAME="kbase/narrative";

my $cfg=read_config();

my $DC=$cfg->{'global'}->{devcontainer};
my $DEPLOY=$cfg->{'global'}->{deploydir};
my $nar=$DC."/modules/narrative";
my $DT=$cfg->{'global'}->{dtdir};

my $UI=$DC."/modules/ui-common";
my @sl=myservices();
exit unless scalar(@sl);

my $scfg=$cfg->{services}->{narrative};
my $narr_host=$scfg->{'service-url'};
$narr_host=~s/http.*\/\///;
$narr_host=~s/[\/]+//;
# base URL for references to other services
my $base_url=$cfg->{global}->{'baseurl'};
$base_url=~s/http.*\/\///;
$base_url=~s/\///;
my $awe=$scfg->{'awe-url'};
my $njs=$scfg->{'njs-url'};
my $njsw=$scfg->{'njsw-url'};
my $njp=$scfg->{'njp-url'};
my $trans=$scfg->{'transform-url'};
my $wsid=$scfg->{'example-wsid'};

my $nginxcfg="/etc/nginx/sites-available/default";
mysystem('sed -i \'s/narrative.kbase.us/'.$narr_host.'/\' '.$DT."/config/narrative.nginx");
# copy nginx file (assumes file is owned by current user (jenkins for CI env))
mysystem("cp $DT/config/narrative.nginx $nginxcfg");
# todo: how to restart nginx as non-root?  add user to nginx group?

chdir "$UI";
print "Deploying ui-common\n";
mysystem("./deployFunctionalSite.sh > /dev/null");

# Copy lua files
if ( ! -e "$DEPLOY/services/narrative" ){
  mkdir "$DEPLOY/services/narrative" or die "Unable to create directory";
}
if ( ! -e "$DEPLOY/services/narrative/docker" ){
  mkdir "$DEPLOY/services/narrative/docker" or die "Unable to create directory";
}
mysystem("cp -r $nar/docker/*.lua $nar/docker/resty/ $DEPLOY/services/narrative/docker/");


# TODO:  abstract out this recursive grep and sed into a perl function
#
# Replace kbase.us/serices with new url
print "Replacing kbase in ui-common\n";
mysystem('grep -rl //kbase.us/services /kb/deployment/ui-common 2>/dev/null|xargs sed -i "s/\/\/kbase.us\/services/\/\/' . $base_url . '\/services/g" || echo "skip"');

# Samething for www.kbase.us
mysystem('grep -rl //www.kbase.us/services /kb/deployment/ui-common 2>/dev/null|xargs sed -i "s/\/\/www.kbase.us\/services/\/\/' . $base_url . '\/services/g" || echo "skip"');

# Now for the search url
# this should already be fixed

# Now for the narrative url
print "Replacing narrative in ui-common\n";
mysystem('grep -rl narrative.kbase.us /kb/deployment/ui-common 2>/dev/null|xargs sed -i "s/narrative.kbase.us/'.$narr_host.'" || echo "skip"');

exit if defined $ENV{'SKIPNAR'};
# Build docker
chdir "$DC/modules/narrative" or die "Unable to change dir";
print "Replacing kbase in narrative $DC/narrative\n";
mysystem('grep -rl //kbase.us/services '.$DC.'/modules/narrative 2>/dev/null|xargs sed -i "s/\/\/kbase.us\/services/\/\/' . $base_url . '\/services/g" || echo "Done" ');

mysystem('grep -rl narrative.kbase.us '.$DC.'/modules/narrative 2>/dev/null|xargs sed -i "s/narrative.kbase.us/'.$narr_host.'" || echo "Done" ');

# Fix up config.json
my $cj=$DC."/modules/narrative/src/config.json";
$awe=~s/\//\\\//g;
mysystem('sed -i "s/\"awe\":.*/\"awe\": \"'.$awe.'\",/" '.$cj);
$njp=~s/\//\\\//g;
mysystem('sed -i "s/\"narrative_job_proxy\":.*/\"narrative_job_proxy\": \"'.$njp.'\",/" '.$cj);
$njsw=~s/\//\\\//g;
mysystem('sed -i "s/\"job_service\":.*/\"job_service\": \"'.$njsw.'\",/" '.$cj);
$trans=~s/\//\\\//g;
mysystem('sed -i "s/\"transform\":.*/\"transform\": \"'.$trans.'\",/" '.$cj);

# Fix up example tab
# Replace: exampleWsId: 2901, // designed to be a workspace with just a handful of objects
if (defined $wsid) {
  my $js=$DC."/modules/narrative/src/notebook/ipython_profiles/profile_narrative/kbase_templates/static/kbase/js/widgets/narrative_core/kbaseNarrativeExampleDataTab.js";
  mysystem('sed -i "s/exampleWsId:.*,/exampleWsId: '.$wsid.',/" '.$js);
}

# Now build
print "Running buildNarrativeContainer\n";
mysystem("sh ./buildNarrativeContainer.sh");

# Logging
# TODO: try to get this in a make file or something in the repo
#
if (defined $scfg->{logging}){
  mysystem("ps aux|grep kb-log-proxy|grep -v grep|awk '{print \"kill \"\$2}'|sh");
  mysystem("cp -a $nar/src/biokbase/narrative $DEPLOY/lib/biokbase/");
  mysystem("cp -a $nar/src/scripts/kb-* $DEPLOY/bin/");
  mysystem("cp -a $nar/narrative-log-proxy.conf $DEPLOY/");

  open(N,"> $DEPLOY/narrative-log-proxy.conf");
  print N "# proxy listen host and port\n";
  print N "host:  172.17.42.1\n";
  print N "port: 32001\n";
  print N "# mongodb server user/pass and database\n";
  print N "db_host: ".$scfg->{'mongodb-host'}."\n";
  print N "db_port: 27017\n";
  print N "user: ".$scfg->{'mongodb-user'}."\n";
  print N "password: ".$scfg->{'mongodb-pwd'}."\n";
  print N "db: ".$scfg->{'mongodb-database'}."\n";
  print N "collection: narrative\n";
  
  if (defined $scfg->{'syslog_host'}){
    print N "# syslog destination\n";
    print N "syslog_facility: ".$scfg->{'syslog-facility'}."\n";
    print N "syslog_host: ".$scfg->{'syslog-host'}."\n";
    print N "syslog_port: 514\n";
    print N "syslog_proto: tcp\n";
  }
  
  close N;
  mysystem(". $DEPLOY/user-env.sh;kb-log-proxy -f $DEPLOY/narrative-log-proxy.conf > /tmp/narrative-log-proxy.log 2>&1 &");
}

# This kills off the old provisioned containers to pick up fresh ones
mysystem("curl -k -X DELETE https://localhost/proxy_map/provisioned || echo Ignore error");

# Test this out
print `sudo /etc/init.d/nginx reload`;

KBDeploy::mark_complete('narrative',@sl);

