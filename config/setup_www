#!/usr/bin/env perl
use FindBin;
use lib "$FindBin::Bin/../perl/";
use KBDeploy;
use Getopt::Std;
use strict;

my %opt;
my $force=0;
my $dryrun=0;

getopts('nf',\%opt);
$dryrun=1 if defined $opt{n};
$force=1 if defined $opt{f};

# Parameters
my $debug=0;
my $nginxTopConfigDest="/etc/nginx/nginx.conf";
my $nginxTopConfigSrc=$FindBin::Bin."/nginx.conf";
my $nginxfile="/etc/nginx/sites-enabled/default";
my $ngintemp=$FindBin::Bin."/nginx.tmpl";

my $cfg=read_config();
my @sl=myservices();
die "Only run this on the www host\n" unless $sl[0] eq 'www';


if ($dryrun){
  print " - Exiting in dry run mode.\n";
  exit;
}

# Create document area
mkdir "/kb" if ( ! -e "/kb/");
mkdir "/kb/docs" if ( ! -e "/kb/docs");
mkdir "/kb/docs/services" if ( ! -e "/kb/docs/services");
mkdir "/kb/docs/services/docs" if ( ! -e "/kb/docs/services/docs");

# Make a backup
my $date=`date +%Y%m%d%H%M`;
chomp $date;
mysystem("/bin/cp $nginxfile /tmp/nginx.default.$date");
mysystem("/bin/cp $nginxTopConfigDest /tmp/nginx.conf.$date");

# generate new config
mysystem("/bin/cp $nginxTopConfigSrc $nginxTopConfigDest");
open(T,"./nginx.tmpl") or die "Unable to open template";
open(my $new,">  $nginxfile") or die "Unable to open nginx file";
while(<T>){
  print $new $_;
  print_narrative($new,0) if (/\%NARINCLUDE/);
  printserv($new,0) if (/\%INCLUDE/);
  printserv($new,1) if (/\%SSLINCLUDE/);
}
close N;
exit if defined $ENV{'NOSTART'};
print `sudo /etc/init.d/nginx configtest`;
my $status=$?;
# TODO: if configtest fails then revert
print `sudo /etc/init.d/nginx restart`;

sub printserv{
  my $new=shift;
  my $ssl=shift;
  foreach my $s (@{$cfg->{servicelist}}){
     my $sc=$cfg->{services}->{$s};
     next if $sc->{proxytype} eq 'skip';
     next if $sc->{type} eq 'worker';
     #print "Service; $s\n";
     die "Port not defined for $s\n" if ! defined $sc->{'service-port'};
     if ($ssl){
       proxy($new,$s,$sc) if ! defined $sc->{proxytype};
       fastcgi($new,$s,$sc) if $sc->{proxytype} eq 'fastcgi';
       docs($new,$s,$sc);
       mkdir "/kb/docs/services/$s";
       mkdir "/kb/docs/services/docs/$sc->{basedir}";
     }
     else{
       proxy($new,$s,$sc) if ! defined $sc->{proxytype};
       fastcgi($new,$s,$sc) if $sc->{proxytype} eq 'fastcgi';
       docs($new,$s,$sc);
       mkdir "/kb/docs/services/$s";
       mkdir "/kb/docs/services/docs/$sc->{basedir}";
     }
  }
}

sub proxy {
  my $fh=shift;
  my $service=shift;
  my $s=shift;

  print $fh "        location /services/$s->{urlname} {\n";
  print $fh "            add_header Access-Control-Allow-Origin \$http_origin;\n" if ($s->{urlname} eq 'search');
  print $fh "            proxy_pass http://".$s->{host}.":".$s->{'service-port'}."/",$s->{base}.";\n";
  print $fh '            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for' . ";\n";
  print $fh '            proxy_set_header X-Real-IP $remote_addr' . ";\n";
  print $fh '            proxy_set_header Host $http_host' . ";\n";
  print $fh '            proxy_set_header X-Forwarded-Proto $scheme' . ";\n";
  print $fh "        }\n";

}

sub fastcgi {
  my $fh=shift;
  my $service=shift;
  my $s=shift;

  print $fh "        location /services/$service {\n";
#  print $fh "            add_header Access-Control-Allow-Origin \$http_origin;\n";
  print $fh "            # host and port to fastcgi server\n";
  print $fh "            rewrite /services/$service(.*) \$1 break;\n";
  print $fh "            fastcgi_pass ".$s->{host}.":".$s->{'service-port'}.";\n";
  print $fh "            fastcgi_param PATH_INFO \$fastcgi_script_name;\n";
  print $fh "            fastcgi_param REQUEST_METHOD \$request_method;\n";
  print $fh "            fastcgi_param QUERY_STRING \$query_string;\n";
  print $fh "            fastcgi_param CONTENT_TYPE \$content_type;\n";
  print $fh "            fastcgi_param CONTENT_LENGTH \$content_length;\n";
  print $fh "            fastcgi_param SERVER_NAME \$server_name;\n";
  print $fh "            fastcgi_param SERVER_PORT \$server_port;\n";
  print $fh "            fastcgi_param SERVER_PROTOCOL \$server_port;\n";
  print $fh "            fastcgi_pass_header Authorization;\n";
  print $fh "            fastcgi_intercept_errors off;\n";
  print $fh "            fastcgi_param REMOTE_ADDR \$remote_addr;\n";
  print $fh "        }\n";
}

sub docs {
  my $fh=shift;
  my $service=shift;
  my $s=shift;
  my $servicedir=$service;
  $servicedir=$s->{basedir} if defined $s->{basedir};

  print $fh "        location /services/docs/$servicedir {\n";
  print $fh "            proxy_pass http://".$s->{host}."/".$servicedir.";\n";
  print $fh "        }\n";

}

sub print_narrative {
  my $fh=shift;
  print $fh "        location / {\n";
  print $fh "                 proxy_pass http://".$cfg->{services}->{narrative}->{host}."/;\n";
  print $fh "        }\n";
}

