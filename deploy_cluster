#!/usr/bin/env perl 

use lib './perl';
use Data::Dumper;
use KBDeploy;
use KBProvision;
use Getopt::Std;
use strict;

my $debug=0;
my $verbose=0;
my %opt;
my $dry_run=0;
my $force;
my $defcfgfile='cluster.ini';
my $cfgfile=$defcfgfile;
getopts('nvfc:', \%opt);    # -o, -D & -I take arg.  Sets $opt_* as a side effect.

$dry_run=1 if (defined $opt{n});
$force=1 if (defined $opt{f});
$debug=1 if (defined $opt{d});
$verbose=1 if (defined $opt{v});
$cfgfile=$opt{c} if (defined $opt{c});

my $cfg=read_config($cfgfile);
my $global=$cfg->{global};
my $basedir=$global->{dtdir};

my $_=shift @ARGV;

if (/mkvm/) {
    update_available();
    configure_vms();
}
elsif (/boot/) {
    KBProvision::boot_nodes($global->{xcatgroup});
}
elsif (/syncdt/) {
    sync_dt(@ARGV);
}
elsif (/^deploy/) {
    deploy_services(@ARGV);
}
elsif (/updatehostassignments/) {
     update_available();
}
elsif (/status/) {
     status();
}
elsif (/start/) {
    start(@ARGV);
}
elsif (/stop/) {
    stop(@ARGV);
}
elsif (/test/) {
    run_test(@ARGV);
}
elsif (/mkhashfile$/) {
     KBDeploy::mkhashfile($ARGV[0]);
}
elsif (/updatehashfile$/) {
     KBDeploy::updatehashfile(@ARGV);
}
elsif (/resetdeploy/) {
     resetdeploy(@ARGV);
}
else {
    printf stderr "Usage: $0 <mkvm|boot|syncdt|deploy|start [all]|stop [all]|test [all]|mkhashfile|resetdeploy>\n";
    exit 1;
}


sub update_available {
  $cfg->{nodes}->{used}=KBProvision::assignments($global->{xcatgroup});

  # Create a list of nodes that can be used
  for (my $i=1;$i<=$global->{maxnodes};$i++){
    my $name=sprintf "%s%02d",$global->{basename},$i;
    if (! defined $cfg->{nodes}->{used}->{$name}){
      print "Available: $name\n" if $debug;
      push @{$cfg->{nodes}->{available}},$name;
    }
  }
}

#
# For each service, see if there is a host assigned.  If not, create it
#
sub configure_vms {
  foreach my $service (@{$cfg->{servicelist}}){
    #next if $service eq $globaltag;
    print "Service: $service\n" if $debug;
    my $scfg=$cfg->{services}->{$service};
    if (defined $scfg->{skipdeploy}){
      print "- skipdeploy set.  Skipping\n" if $verbose;
      next;
    }
    if (! defined $scfg->{host}){
      print "- Configure $service\n" if $debug;
      my $host=shift @{$cfg->{nodes}->{available}} or die "No more nodes to allocate";
      print "- Assigning $host to $service\n";
      KBProvision::config_host($host,$service,$scfg);
      KBDeploy::update_config($cfgfile,$service,'host',$host);
    }
    else{
      print "- Configured using $scfg->{host}\n" if $debug>1;
    }
  }
}

#
# Copy out deploy_tools
# TODO: Replace with bootstrap process
#
sub sync_dt {
   # Push out the scripts
   my $fl=join " ",@_;
   my $list=KBDeploy::hostlist();
   $list=$fl if $fl;

   warn "syncing dt to hosts $list";
   KBProvision::run_remote_all($list,"[ -e $basedir ] || mkdir $basedir");
   mysystem("pdcp -w $list $0 $basedir/$0");
   mysystem("pdcp -w $list $cfgfile $basedir/$defcfgfile");
   mysystem("pdcp -w $list -r perl $basedir/");
   mysystem("pdcp -w $list -r config $basedir/");
}

#
# Deploy service
#
sub deploy_services{
   my $option=shift;
   my $hashfile;
   my $remote=0;
   my $list;
   my @sl;

   my $opts='';
   $opts.=' -n' if $dry_run;
   $opts.=' -f' if $force;

   if ($option eq 'all'){
     print "Deploy All\n" if $verbose;
     $list=KBDeploy::hostlist();
     @sl=@{$cfg->{servicelist}};
     $remote=1;
   }
   elsif (defined $cfg->{services}->{$option}){
     $list=$cfg->{services}->{$option}->{host};
     push @sl,$option;
     print "Deploy $option on $list\n" if $verbose;
     $remote=1;
   }
   elsif ($option eq 'local'){
     print "Local Deploy\n" if $verbose;
   }
   else {
     print "Local Deploy\n" if $verbose;
     unshift @_,$option;
   }
   $hashfile=shift;
   if (defined $hashfile){
     if (! -e $hashfile){
       print STDERR "Missing Hashfile $hashfile\n";
       exit 1;
     }
     else{
       print "Hashfile: $hashfile\n" if $verbose;
     }
   }
   
   if ($remote){
     update_available();
     if (defined $hashfile){
       KBProvision::sync_files($list,$basedir,$hashfile);
       # Remove path stuff
       $hashfile=~s/.*\///;
       #print STDERR "Hashfile: $hashfile\n";
     }
     KBProvision::sync_file($list,$basedir,$cfgfile,$defcfgfile);
   
     #Now run the local scripts
     for my $service (@sl){
       my $script=$cfg->{services}->{$service}->{setup} if (defined $cfg->{services}->{$service}->{setup});
       print "$service:\n";
       if (defined $cfg->{services}->{$service}->{skipdeploy}){
         print " - Skipping: skipdeploy set.\n" if $verbose;
         next;
       }
       print " - Running: $script $opts $hashfile\n" if $verbose;
       mysystem("ssh ".$cfg->{services}->{$service}->{host}." 'cd $basedir/config;./$script $opts $hashfile'");
     }
   }
   else{
     @sl=myservices();
     for my $service (@sl){
        my $script=$cfg->{services}->{$service}->{setup};
        mysystem("cd $basedir/config;./$script $opts $hashfile");
     }
   }
}

#
# Test service
#
sub run_test{
   my $list=KBDeploy::hostlist();

   if ($_[0] eq 'local'){
     # Run test
     my @sl=myservices();
     KBDeploy::test_service(@sl);
     return;
   }
   elsif ($_[0] ne 'all'){
     $list=join ',',@_;
   }
   for my $host (split /,/,$list){
     KBProvision::run_remote($host,"cd $basedir/;./$0 test local");
   }
}

#
#
# See if things are running
# TODO: Make this better
#
sub status{
   my $list=KBDeploy::hostlist();
   KBProvision::run_remote_all($list,'ps aux|grep /kb|grep -v grep|wc -l|grep 0\$;true');
}

# Run start_service
sub start{
   my $param=shift;

   if ($param eq 'all'){
     sync_dt();
     my $list=KBDeploy::hostlist();

     KBProvision::run_remote_all($list,"cd $basedir/;./$0 start");
   }
   else{
     # This is run on the service node
     my @sl=myservices();

     KBDeploy::start_service(@sl);
   }
}

# Run stop_service
sub stop{
   my $param=shift;

   if ($param eq 'all'){
     sync_dt();
     my $list=KBDeploy::hostlist();

     KBProvision::run_remote_all($list,"cd $basedir/;./$0 stop");
   }
   else{
     # This is run on the service node
     my @sl=myservices();

     KBDeploy::stop_service(@sl);
   }
}

# Removes done file
#
# TODO: Make this cleaner
sub resetdeploy{
   my $list=join ',',KBDeploy::hostlist();

   if (@_[0] eq 'local'){
     KBDeploy::reset_complete();
     return;
   }
   elsif (defined @_[0] && @_[0] ne 'all'){
     $list=join ",",@_;
   }
   KBProvision::run_remote_all($list,"cd $basedir/;./$0 resetdeploy local");
}
